" last edited: 2013-08-24 14:56:54 CEST
"
" "http://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim/12201181220118#1220118


"============== environment settings ==============

    " Use Vim settings, rather than Vi settings (much better!).
    " This must be first, because it changes other options as a side effect.
    runtime! archlinux.vim
    set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after 
    set runtimepath+=$HOME/.vim/after
    set nocompatible                        " we use vim, not vi!
    set encoding=utf-8
    set ttyfast
    set clipboard+=unnamed
    set noerrorbells
    if has('mouse')
      set mouse=a
    endif
    set spelllang=de
    set scrolloff=10
    set hidden


"============== status line options ==============

    "set cursorline
    set number                        " line numbers
    set ruler                         " show cursor position under each window	
    set showmode
    set wrap
    set linebreak                     " attempt to wrap lines cleanly
    set showmatch                     " show matching brackets and stuff 
    set backspace=indent,eol,start    " allow backspacing over everything
    set backup                        " make backups of edited backups
    set backupdir=~/.vim/backup       " where to store the backups
    set noswapfile
    set nowb
    set history=250                   " how many commands to keep 
    set laststatus=2
    set statusline=\ \%f%m%r%h%w\ ::\ %y\ [%{&ff}]\%=\ [%p%%:\ %l/%L][%c]\ 
    set lcs=tab:\|\ ,trail:.          " show trailing spaces


"============== searching, higlighting and folding ==============

    set showcmd                       " show partial commans in the status line
    set incsearch                     " increment search
    set ignorecase                    " case-insensitive search
    set smartcase                     " uppercase causes case-sensitive search
    set magic                         " turn on magic for regexp
    set wildmenu
    set wildmode=longest:list,full    " Specifies command line completion 
    set foldmethod=indent
    set foldlevel=10
    let g:is_posix=1                  " POSIX shell scripts
    let g:loaded_matchparen=1         " disable parenthesis hlight plugin
    let g:is_bash=1                   " bash syntax the default for hlighting
    let g:vimsyn_noerror=1            " hack for correct syntax hlighting


"============== indenting ==============

    set tabstop=2
    set shiftwidth=2
    set expandtab
    set autoindent		" always set autoindenting on
    set smartindent


"============== color settings ==============

    if &t_Co > 2 || has("gui_running")
      syntax on
      "colorscheme desert
      let g:hybrid_use_Xresources = 1
      colorscheme hybrid
      set hlsearch
      set colorcolumn=0
      let s:color_column_old = 80       " toggle colorcolumn after 80 chars
    endif


"============== automagic ==============

    if has("autocmd")
      filetype plugin indent on
      " For all text files set 'textwidth' to 78 characters.
      autocmd FileType text setlocal tw=80
      " set textwidth and activate spell for tex files
      autocmd FileType tex setlocal tw=80 spell nocindent
      " jump to last cursor positon
      autocmd BufReadPost *
        \ if line("'\"") > 1 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif
      " act perl compliant
      autocmd FileType perl setlocal ts=4 sw=4 tw=80 nocindent
      " Commenting blocks of code.
      autocmd FileType c,cpp,java,scala let b:comment_leader = '// '
      autocmd FileType sh,ruby,python   let b:comment_leader = '# '
      autocmd FileType perl             let b:comment_leader = '# '
      autocmd FileType conf,fstab       let b:comment_leader = '# '
      autocmd FileType tex              let b:comment_leader = '% '
      autocmd FileType mail             let b:comment_leader = '> '
      autocmd FileType vim              let b:comment_leader = '" '
    endif " has("autocmd")

    " Convenient command to see the difference between the current buffer and 
    " the file it was loaded from, thus the changes you made.
    " Only define it when not defined already.
    if !exists(":DiffOrig")
      command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
              \ | wincmd p | diffthis
    endif


"============== autoreplace text ==============

    iab <expr> dts strftime("%F %T %Z")
    iab <expr> dtc strftime("%FT%T%z")


"============== tex related ==============

    set grepprg=grep\ -nH\ $*
    let g:tex_flavor = "latex"
    let g:Tex_DefaultTargetFormat='pdf'
    let g:Tex_ViewRule_pdf='zathura'
    let g:Tex_CompileRule_dvi='latex -interaction=nonstopmode $*'
    let g:Tex_CompileRule_pdf='pdflatex -interaction=nonstopmode $*'


"============== helper functions ==============

    " function to toggle colour column
    function! s:ToggleColorColumn()
        if s:color_column_old == 0
            let s:color_column_old = &colorcolumn
            windo let &colorcolumn = 0
        else
            windo let &colorcolumn=s:color_column_old
            let s:color_column_old = 0
        endif
    endfunction

    " Map keys to toggle functions
    function! MapToggle(key, opt)
      let cmd = ':set '.a:opt.'! \| set '.a:opt."?\<CR>"
      exec 'nnoremap '.a:key.' '.cmd
      exec 'inoremap '.a:key." \<C-O>".cmd
    endfunction


"============== mappings ==============

    let mapleader = ","
    " Jump between %VAR% placeholders in Normal mode with <Ctrl-p>
    nnoremap <c-p> /%\u.\{-1,}%<cr>c/%/e<cr>
    " Jump between %VAR% placeholders in Insert mode with <Ctrl-p>
    inoremap <c-p> <ESC>/%\u.\{-1,}%<cr>c/%/e<cr>
    " space bar unhighlights search
    :nnoremap <silent> <Space> :silent noh<Bar>echo<CR>
    " un-/commenting made easy
    noremap <silent> ,cc :<C-B>silent <C-E>s/^\( *\)/\1<C-R>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR>
    noremap <silent> ,cu :<C-B>silent <C-E>s/^\( *\)\V<C-R>=escape(b:comment_leader,'\/')<CR>/\1/e<CR>:nohlsearch<CR>
    " keep cursor centered
    :nnoremap j jzz
    :nnoremap k kzz
    " easy diffwalking
    map <C-m> ]c
    " Don't use Ex mode, use Q for formatting
    map Q gq

    " <bar> is the pipe |
    nnoremap <bar> :call <SID>ToggleColorColumn()<cr>

    command! -nargs=+ MapToggle call MapToggle(<f-args>)
    MapToggle <F2> paste
    MapToggle <F3> hlsearch
    MapToggle <F5> spell
    MapToggle <F8> wrap  


